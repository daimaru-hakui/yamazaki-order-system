// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @unique
  email     String   @unique
  username  String?
  role      UserRole @default(USER)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("users")
}

enum UserRole {
  USER
  ADMIN
  MEMBER
}

model Size {
  id          Int     @id @default(autoincrement())
  name        String
  description String?
  skus        Sku[]

  @@map("sizes")
}

model Color {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  Products    Product[]

  @@map("colors")
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  products    Product[]

  @@map("categories")
}

model Sku {
  id           Int      @id @default(autoincrement())
  productCode  String?  @map("product_code")
  janCode      String?  @map("jan_code")
  product      Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId    Int      @map("product_id")
  size         Size     @relation(fields: [sizeId], references: [id], onDelete: Cascade)
  sizeId       Int      @map("size_id")
  price        Int      @default(0)
  stock        Int      @default(0)
  displayOrder Int      @default(100) @map("display_order")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @default(now()) @updatedAt @map("updated_at")

  @@unique([sizeId, productId], name: "skuIdentifier")
  @@map("skus")
}

model Product {
  id              Int               @id @default(autoincrement())
  productNumber   String            @map("product_number")
  productName     String            @map("product_name")
  description     String?
  category        Category          @relation(fields: [categoryId], references: [id])
  categoryId      Int               @map("cateogry_id")
  color           Color             @relation(fields: [colorId], references: [id])
  colorId         Int               @map("color_id")
  skus            Sku[]
  customerProduct CustomerProduct[]
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @default(now()) @updatedAt @map("updated_at")

  @@unique([productNumber, colorId, categoryId])
  @@map("products")
}

model Customer {
  id              Int               @id @default(autoincrement())
  name            String
  address         String?
  tel             String?
  orders          Order[]
  customerProduct CustomerProduct[]
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @default(now()) @updatedAt @map("updated_at")

  @@map("customers")
}

model CustomerProduct {
  id         String   @id @default(uuid())
  customer   Customer @relation(fields: [customerId], references: [id])
  customerId Int      @map("customer_id")
  product    Product  @relation(fields: [productId], references: [id])
  productId  Int      @map("product_id")

  @@unique([customerId, productId])
  @@map("customer_product")
}

model Order {
  id         Int      @id @default(autoincrement())
  customer   Customer @relation(fields: [customerId], references: [id])
  customerId Int      @map("customer_id")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  @@map("orders")
}
