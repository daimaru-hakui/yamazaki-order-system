// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

model User {
  id        String     @id @unique
  email     String     @unique
  name      String?    @db.Text
  role      UserRole   @default(USER)
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @default(now()) @updatedAt @map("updated_at")
  Order     Order[]
  Shipping  Shipping[]

  @@map("users")
}

enum UserRole {
  USER
  ADMIN
  MEMBER
}

model Size {
  id          String  @id @default(uuid())
  code        Int     @unique
  name        String  @db.Text
  description String?
  skus        Sku[]

  @@map("sizes")
}

model Color {
  id          String    @id @default(uuid())
  code        Int       @unique
  name        String    @db.Text
  description String?
  Products    Product[]

  @@map("colors")
}

model Category {
  id          String    @id @default(uuid())
  code        Int       @unique
  name        String    @db.Text
  description String?
  products    Product[]

  @@map("categories")
}

model Sku {
  id             String           @id @default(uuid())
  productCode    String?          @map("product_code") @db.Text
  janCode        String?          @map("jan_code") @db.Text
  product        Product          @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId      String           @map("product_id")
  size           Size             @relation(fields: [sizeId], references: [id], onDelete: Cascade)
  sizeId         String           @map("size_id")
  price          Int              @default(0)
  stock          Int              @default(0)
  displayOrder   Int              @default(100) @map("display_order")
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @default(now()) @updatedAt @map("updated_at")
  orderDetail    OrderDetail[]
  Price          Price[]
  shippingDetail ShippingDetail[]

  @@unique([sizeId, productId], name: "skuIdentifier")
  @@map("skus")
}

model Price {
  id         String   @id @default(uuid())
  price      Int      @default(0)
  sku        Sku      @relation(fields: [skuId], references: [id], onDelete: Cascade)
  skuId      String   @map("sku_id")
  startPrice DateTime @map("start_price") @db.Date
  endPrice   DateTime @map("end_price") @db.Date

  @@unique([skuId, startPrice, endPrice], name: "priceIdentifier")
  @@map("prices")
}

model Product {
  id              String            @id @default(uuid())
  productNumber   String            @map("product_number") @db.Text
  productName     String            @map("product_name") @db.Text
  description     String?           @db.Text
  category        Category          @relation(fields: [categoryId], references: [id])
  categoryId      String            @map("cateogry_id")
  color           Color             @relation(fields: [colorId], references: [id])
  colorId         String            @map("color_id")
  skus            Sku[]
  customerProduct CustomerProduct[]
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @default(now()) @updatedAt @map("updated_at")

  @@unique([productNumber, colorId, categoryId])
  @@map("products")
}

model Customer {
  id              String            @id @default(uuid())
  code            Int               @unique
  name            String            @db.Text
  address         String?           @db.Text
  tel             String?           @db.Text
  orders          Order[]
  customerProduct CustomerProduct[]
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @default(now()) @updatedAt @map("updated_at")

  @@map("customers")
}

model CustomerProduct {
  id         String   @id @default(uuid())
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId String   @map("customer_id")
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId  String   @map("product_id")

  @@unique([customerId, productId])
  @@map("customer_products")
}

model Order {
  id          Int           @id @default(autoincrement())
  orderNumber String?       @map("order_number")
  customer    Customer      @relation(fields: [customerId], references: [id])
  customerId  String        @map("customer_id")
  comment     String?       @db.Text
  orderDetail OrderDetail[]
  user        User          @relation(fields: [userId], references: [id])
  userId      String        @map("user_id")
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")
  shipping    Shipping[]

  @@map("orders")
}

model OrderDetail {
  id        Int      @id @default(autoincrement())
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   Int      @map("order_id")
  sku       Sku      @relation(fields: [skuId], references: [id])
  skuId     String   @map("sku_id")
  price     Int      @default(0)
  quantity  Int      @default(0)
  firstName String?  @map("first_name") @db.Text
  lastName  String?  @map("last_name") @db.Text
  memo      String?  @db.Text
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("order_details")
}

model Shipping {
  id             Int              @id @default(autoincrement())
  order          Order            @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId        Int              @map("order_id")
  user           User             @relation(fields: [userId], references: [id], onDelete: NoAction)
  userId         String           @map("user_id")
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @updatedAt @map("updated_at")
  shippingDetail ShippingDetail[]

  @@map("shippings")
}

model ShippingDetail {
  id         Int      @id @default(autoincrement())
  shipping   Shipping @relation(fields: [shippingId], references: [id], onDelete: Cascade)
  shippingId Int      @map("shipping_id")
  sku        Sku      @relation(fields: [skuId], references: [id])
  skuId      String   @map("sku_id")
  price      Int      @default(0)
  quantity   Int      @default(0)
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  @@map("shipping_details")
}
